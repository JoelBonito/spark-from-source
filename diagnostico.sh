#!/bin/bash

# Script de Diagn√≥stico - Trusmile AI
# Detecta por que o c√≥digo antigo ainda est√° sendo servido

echo "üîç DIAGN√ìSTICO - Trusmile AI"
echo "========================================"
echo ""

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# 1. Verificar c√≥digo fonte
echo "1Ô∏è‚É£ Verificando c√≥digo fonte..."
if grep -q "action: 'report'" src/services/technicalReportService.ts; then
    echo -e "${GREEN}‚úÖ technicalReportService.ts est√° CORRETO (usa Edge Function)${NC}"
else
    echo -e "${RED}‚ùå technicalReportService.ts est√° ERRADO (c√≥digo antigo)${NC}"
fi

if grep -q "VITE_GEMINI_API_KEY" src/pages/simulator/SimulatorPage.tsx; then
    echo -e "${RED}‚ùå SimulatorPage.tsx cont√©m VITE_GEMINI_API_KEY (c√≥digo antigo)${NC}"
else
    echo -e "${GREEN}‚úÖ SimulatorPage.tsx est√° CORRETO (sem refer√™ncia a API key)${NC}"
fi

echo ""

# 2. Verificar arquivos de build
echo "2Ô∏è‚É£ Verificando arquivos de build/cache..."
if [ -d "dist" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Pasta 'dist' existe (build de produ√ß√£o)${NC}"
    echo "   ‚Üí Remova com: rm -rf dist"
else
    echo -e "${GREEN}‚úÖ Pasta 'dist' n√£o existe${NC}"
fi

if [ -d "node_modules/.vite" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Cache do Vite existe (node_modules/.vite)${NC}"
    echo "   ‚Üí Remova com: rm -rf node_modules/.vite"
else
    echo -e "${GREEN}‚úÖ Cache do Vite limpo${NC}"
fi

if [ -d ".vite" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Pasta .vite existe${NC}"
    echo "   ‚Üí Remova com: rm -rf .vite"
else
    echo -e "${GREEN}‚úÖ Pasta .vite n√£o existe${NC}"
fi

echo ""

# 3. Verificar processos rodando
echo "3Ô∏è‚É£ Verificando processos Node/Vite rodando..."
if pgrep -f "vite" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Processo Vite est√° rodando:${NC}"
    ps aux | grep vite | grep -v grep
    echo "   ‚Üí Pare com: pkill -f vite"
elif pgrep -f "node.*vite" > /dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Processo Node (Vite) est√° rodando:${NC}"
    ps aux | grep "node.*vite" | grep -v grep
    echo "   ‚Üí Pare com: pkill -f 'node.*vite'"
else
    echo -e "${GREEN}‚úÖ Nenhum processo Vite rodando${NC}"
fi

echo ""

# 4. Verificar configura√ß√£o do Vite
echo "4Ô∏è‚É£ Verificando vite.config.ts..."
if [ -f "vite.config.ts" ]; then
    echo -e "${GREEN}‚úÖ vite.config.ts encontrado${NC}"
    if grep -q "server:" vite.config.ts; then
        echo "   Configura√ß√µes de servidor:"
        grep -A 5 "server:" vite.config.ts | head -6
    fi
else
    echo -e "${RED}‚ùå vite.config.ts n√£o encontrado${NC}"
fi

echo ""

# 5. Verificar .env
echo "5Ô∏è‚É£ Verificando arquivo .env..."
if grep -q "VITE_GEMINI_API_KEY" .env 2>/dev/null; then
    echo -e "${RED}‚ùå .env cont√©m VITE_GEMINI_API_KEY (REMOVA!)${NC}"
    echo "   Valor encontrado:"
    grep "VITE_GEMINI_API_KEY" .env
else
    echo -e "${GREEN}‚úÖ .env n√£o cont√©m VITE_GEMINI_API_KEY${NC}"
fi

echo ""

# 6. Verificar √∫ltimos commits
echo "6Ô∏è‚É£ √öltimos commits (c√≥digo foi atualizado?)..."
git log --oneline -3
echo ""

# 7. Verificar status do git
echo "7Ô∏è‚É£ Status do Git (h√° mudan√ßas n√£o commitadas?)..."
if git diff --quiet; then
    echo -e "${GREEN}‚úÖ Nenhuma mudan√ßa n√£o commitada${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  H√° mudan√ßas n√£o commitadas:${NC}"
    git diff --name-only
fi

echo ""

# 8. Recomenda√ß√µes
echo "========================================"
echo "üìã RECOMENDA√á√ïES:"
echo ""

if [ -d "node_modules/.vite" ] || [ -d ".vite" ] || [ -d "dist" ]; then
    echo "1. Limpar cache e build:"
    echo "   ${YELLOW}rm -rf node_modules/.vite .vite dist${NC}"
    echo ""
fi

if pgrep -f "vite" > /dev/null || pgrep -f "node.*vite" > /dev/null; then
    echo "2. Parar servidor atual:"
    echo "   ${YELLOW}pkill -f vite${NC}"
    echo "   ou pressione Ctrl+C no terminal onde est√° rodando"
    echo ""
fi

echo "3. Reiniciar servidor dev:"
echo "   ${YELLOW}npm run dev${NC}"
echo ""

echo "4. No navegador (janela an√¥nima):"
echo "   - Abra DevTools (F12)"
echo "   - V√° em Network"
echo "   - Marque 'Disable cache'"
echo "   - Hard reload (Ctrl+Shift+R)"
echo ""

echo "========================================"
echo "üîç Fim do diagn√≥stico"
echo ""
